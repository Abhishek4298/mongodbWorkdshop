//CREATE DATABASE
use mango_practice

//movies is a collection

//INSERT DATA INTO 
db.movies.insert([{title : "Fight Club",writer : "Chuck Palahniuk",year : 1999,actors : "Brad Pitt,Edward Norton"},{title : "Pulp Fiction",writer : "Quentin Tarantino",year : 1994,actors :"John Travolta,Uma Thurman"},{title :"Inglorious Basterds",writer : "Quentin Tarantino",year : 2009,actors : "Brad Pitt,Diane Kruger,Eli Roth"},{title :"The Hobbit: An Unexpected Journey",writer : "J.R.R. Tolkein",year : 2012,franchise : "The Hobbit"},{title :"The Hobbit: The Desolation of Smaug",writer :"J.R.R. Tolkein",year : 2013,franchise :"The Hobbit"},{title :"The Hobbit: The Battle of the Five Armies",writer : "J.R.R. Tolkein",year : 2012,franchise :"The Hobbit",synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."},{title :"Pee Wee Herman's Big Adventure"},{title :"Avatar"}])

//FIND

1.GET ALL DOCUMENTS 
db.movies.find().pretty()
{
	"_id" : ObjectId("5e2963797adbd320b111b966"),
	"title" : "Fight Club",
	"writer" : "Chuck Palahniuk",
	"year" : 1999,
	"actors" : "Brad Pitt,Edward Norton"
}
{
	"_id" : ObjectId("5e2963797adbd320b111b967"),
	"title" : "Pulp Fiction",
	"writer" : "Quentin Tarantino",
	"year" : 1994,
	"actors" : "John Travolta,Uma Thurman"
}
{
	"_id" : ObjectId("5e2963797adbd320b111b968"),
	"title" : "Inglorious Basterds",
	"writer" : "Quentin Tarantino",
	"year" : 2009,
	"actors" : "Brad Pitt,Diane Kruger,Eli Roth"
}
{
	"_id" : ObjectId("5e2963797adbd320b111b969"),
	"title" : "The Hobbit: An Unexpected Journey",
	"writer" : "J.R.R. Tolkein",
	"year" : 2012,
	"franchise" : "The Hobbit",
	"synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}
{
	"_id" : ObjectId("5e2963797adbd320b111b96a"),
	"title" : "The Hobbit: The Desolation of Smaug",
	"writer" : "J.R.R. Tolkein",
	"year" : 2013,
	"franchise" : "The Hobbit"
}
{
	"_id" : ObjectId("5e2963797adbd320b111b96b"),
	"title" : "The Hobbit: The Battle of the Five Armies",
	"writer" : "J.R.R. Tolkein",
	"year" : 2012,
	"franchise" : "The Hobbit",
	"synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
{
	"_id" : ObjectId("5e2963797adbd320b111b96c"),
	"title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("5e2963797adbd320b111b96d"), "title" : "Avatar" }


2.get all documents with writer set to "Quentin Tarantino"
db.movies.find({writer:"Quentin Tarantino" }).pretty

3.get all documents where actors include "Brad Pitt"
db.movies.find({"actors" : "Brad Pitt" }).pretty()

4.get all documents with franchise set to "The Hobbit"
db.movies.find({"franchise" : "The Hobbit" }).pretty()

5.get all movies released in the 90s
db.movies.find({year : {$gt : 1990 , $lt :2000}}).pretty()

6.get all movies released before the year 2000 or after 2010
> db.movies.find({$or: [{year: {$lt: 2000}},{year: {$gt: 2010}}]}).pretty()


//UPDATE

1.add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins,
  sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their  
  mountain home - and the gold within it - from the dragon Smaug."

db.movies.update({title:"The Hobbit: An Unexpected Journey"},{ $set: { "synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})

2.add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo 
Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug.
 Bilbo Baggins is in possession of a mysterious and magical ring."

db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{ $set: { "synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})

3.add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"

 db.movies.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L. Jackson"}} );

//TEXT SEARCH (pattern matching)

1.find all movies that have a synopsis that contains the word "Bilbo"
db.movies.find({synopsis:{$regex:"Bilbo"}}).pretty()

2.find all movies that have a synopsis that contains the word "Gandalf"
db.movies.find({synopsis:{$regex:"Gandalf"}}).pretty()

3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}},{synopsis:{$not:/Gandalf/}}]}).pretty()

4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
db.movies.find({$or:[{synopsis:{$regex:"dwarves"}},{synopsis:{$regex:"hobbit"}}]}).pretty()

5find all movies that have a synopsis that contains the word "gold" and "dragon"
db.movies.find({$and:[{synopsis:{$regex:"gold"}},{synopsis:{$regex:"dragon"}}]}).pretty()

//DELETE

1.delete the movie "Pee Wee Herman's Big Adventure"
db.movies.remove({title:"Pee Wee Herman's Big Adventure"});

2.delete the movie "Avatar"
db.movies.remove({title:"Avatar"});

//RELATIONSHIP

//create connection
db.createConnections("users")

//inserting DATA
db.users.insert({
username : "GoodGuyGreg",
 first_name : "Good Guy",
 last_name : "Greg"
},
{
 username : "ScumbagSteve",
 full_name : 
    {"first" : "Scumbag","last" : "Steve"}
   
})

// Insert into  collection
db.createCollections("posts")
db.posts.insertMany([
{
"username": "GoodGuyGreg",
"title": "Passes out at party",
"body": "Wakes up early and cleans house"
},
{
"username": "GoodGuyGreg",
"title": "Steals your identity",
"body": "Raises your credit score"
},
{
"username": "GoodGuyGreg",
"title": "Reports a bug in your code",
"body": "Sends you a Pull Request"
},
{
"username": "ScumbagSteve",
"title": "Borrows something",
"body": "Sells it"
},
{
"username": "ScumbagSteve",
"title": "Borrows everything",
"body": "The end"
},
{
"username": "ScumbagSteve",
"title": "Forks your repo on github",
"body": "Sets to private"
}
])

// Insert into comment collection
db.createCollection("comments")

db.comments.insert([{
"username": "GoodGuyGreg",
"comment": "Hope you got a good deal!",
"post": ObjectId("5e299794caa1e8bf16c4de74")
},
{
"username": "GoodGuyGreg",
"comment": "What's mine is yours!",
"post": ObjectId("5e299794caa1e8bf16c4de75")
},
{
"username": "GoodGuyGreg",
"comment": "Don't violate the licensing agreement!",
"post": ObjectId("5e299794caa1e8bf16c4de76")
},
{
"username": "ScumbagSteve",
"comment": "It still isn't clean",
"post": ObjectId("5e299794caa1e8bf16c4de77")
},
{
"username": "ScumbagSteve",
"comment": "Denied your PR cause I found a hack",
"post": ObjectId("5e299794caa1e8bf16c4de78")
}
])

// find all users
db.users.find().pretty()

// find all posts
db.posts.find().pretty()

// find all posts that was authored by "GoodGuyGreg"
db.posts.find({"username": "GoodGuyGreg"}).pretty()

//find all posts that was authored by "ScumbagSteve"
db.posts.find({"username": "ScumbagSteve"}).pretty()

// find all comments
db.comments.find().pretty()

// find all comments that was authored by "GoodGuyGreg"
db.comments.find({"username": "GoodGuyGreg"}).pretty()

// find all comments that was authored by "ScumbagSteve"
db.comments.find({"username":"ScumbagSteve"}).pretty()

// find all comments belonging to the post "Reports a bug in your code"
db.comments.find({"title": "Reports a bug in your code"}).